// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicScriptures,
  DefaultScripturesProps
} from "../plasmic/my_bible_app_next_generation/PlasmicScriptures";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { bibleBooks } from "../lib/bibleData";
import { bibleVersions } from "../lib/bibleVersions";

interface Verse {
  verse: number;
  text: string;
}

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface ScripturesProps extends Omit<DefaultScripturesProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultScripturesProps altogether and have
// total control over the props for your component.
export interface ScripturesProps extends DefaultScripturesProps {}

function Scriptures_(props: ScripturesProps, ref: HTMLElementRefOf<"div">) {
  const [book, setBook] = React.useState<string | undefined>(undefined);
  const [chapter, setChapter] = React.useState<number | undefined>(undefined);
  const [version, setVersion] = React.useState<string | undefined>(undefined);
  const versions = React.useMemo(
    () => bibleVersions.map((v) => ({ value: v.module, label: v.shortname || v.name })),
    []
  );
  const [verses, setVerses] = React.useState<Verse[]>([]);

  React.useEffect(() => {
    if (version && book && chapter) {
      fetch(
        `/api/bibles/${version}?book=${encodeURIComponent(book)}&chapter=${chapter}`
      )
        .then((res) => res.json())
        .then((data) => setVerses(data))
        .catch((err) => {
          console.error("Failed to load verses", err);
          setVerses([]);
        });
    } else {
      setVerses([]);
    }
  }, [version, book, chapter]);

  const bookOptions = React.useMemo(
    () => bibleBooks.map((b) => ({ value: b.name, label: b.name })),
    []
  );

  const chapterOptions = React.useMemo(() => {
    const selected = bibleBooks.find((b) => b.name === book);
    if (!selected) {
      return [] as { value: number; label: string }[];
    }
    return Array.from({ length: selected.chapters }, (_, i) => ({
      value: i + 1,
      label: String(i + 1),
    }));
  }, [book]);

  return (
    <div ref={ref}>
      <PlasmicScriptures
        {...props}
        versionSelect={{
          props: {
            options: versions,
            value: version,
            onChange: (val: any) => {
              setVersion(val as string);
              setBook(undefined);
              setChapter(undefined);
            },
          },
        }}
        bookSelect={{
          props: {
            options: bookOptions,
            value: book,
            onChange: (value: any) => {
              setBook(value as string);
              setChapter(undefined);
            },
          },
        }}
        chapterSelect={{
          props: {
            options: chapterOptions,
            value: chapter,
            onChange: (value: any) => setChapter(value as number),
          },
        }}
      />
      <div style={{ padding: "1rem" }}>
        {verses.map((v) => (
          <div key={v.verse} style={{ display: "flex", gap: "0.5rem" }}>
            <div style={{ width: "2rem", textAlign: "right" }}>{v.verse}</div>
            <div>{v.text}</div>
          </div>
        ))}
      </div>
    </div>
  );
}

const Scriptures = React.forwardRef(Scriptures_);
export default Scriptures;

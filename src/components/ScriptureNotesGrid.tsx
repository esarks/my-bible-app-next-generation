// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicScriptureNotesGrid,
  DefaultScriptureNotesGridProps,
} from "../plasmic/my_bible_app_next_generation/PlasmicScriptureNotesGrid";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { supabase } from "../lib/supabaseClient";
import { useAuth } from "../AuthContext";
import { logger, logSupabaseError } from "../lib/logger";
import AutoSizeTextarea from "./AutoSizeTextarea";

// Extend props with noteContent to avoid DOM warning
export interface ScriptureNotesGridProps
  extends DefaultScriptureNotesGridProps {
  book: string;
  chapter: number;
  verse: number;
  text: string;
  noteContent?: string;
  onSave?: (content: string) => void;
}

function ScriptureNotesGrid_(
  { book, chapter, verse, text, noteContent, onSave, ...rest }: ScriptureNotesGridProps,
  ref: HTMLElementRefOf<"div">
) {
  const { profile } = useAuth();
  const loginId =
    profile?.id ||
    (typeof window !== "undefined"
      ? localStorage.getItem("loginId") || undefined
      : undefined);

  const [noteId, setNoteId] = React.useState<string | null>(null);
  const [content, setContent] = React.useState<string>(noteContent ?? "");
  const [savedContent, setSavedContent] = React.useState<string>(noteContent ?? "");

  React.useEffect(() => {
    setContent(noteContent ?? "");
    setSavedContent(noteContent ?? "");
  }, [noteContent]);

  const saveNote = async () => {
    if (!supabase || !loginId) {
      logger.warn(
        "[ScriptureNotesGrid] Cannot save without Supabase or loginId"
      );
      return;
    }

    const id = noteId ?? crypto.randomUUID();

    const { error } = await supabase
      .from("Note")
      .upsert({
        id,
        loginId,
        book,
        chapter,
        verse,
        content,
        updatedAt: new Date().toISOString(),
      })
      .select("id")
      .single();

    if (error) {
      logSupabaseError("ScriptureNotesGrid saveNote", error);
    } else {
      setNoteId(id);
      setSavedContent(content);
      onSave?.(content);
    }
  };

  return (
    <PlasmicScriptureNotesGrid
      scriptureNotesGrid={{ ref }}
      scriptureText={{
        children: (
          <>
            <div style={{ fontWeight: "bold", marginBottom: "0.25rem" }}>
              Verse {verse}
            </div>
            <div>{text}</div>
          </>
        ),
      }}
      noteText={{
        children: (
          <>
            <AutoSizeTextarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder={content ? undefined : ""}
              style={{ width: "100%" }}
            />
            <button
              onClick={saveNote}
              disabled={content === savedContent}
              style={{
                marginTop: "0.25rem",
                backgroundColor:
                  content !== savedContent ? "#69c0ff" : "#f0f0f0",
                cursor: content !== savedContent ? "pointer" : "default",
              }}
            >
              Update
            </button>
          </>
        ),
      }}
      addNotesButton={{ style: { display: "none" } }}
      {...rest}
    />
  );
}

const ScriptureNotesGrid = React.forwardRef(ScriptureNotesGrid_);
export default ScriptureNotesGrid;

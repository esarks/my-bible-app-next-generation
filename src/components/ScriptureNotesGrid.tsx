// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import {
  PlasmicScriptureNotesGrid,
  DefaultScriptureNotesGridProps,
} from "../plasmic/my_bible_app_next_generation/PlasmicScriptureNotesGrid";
import { HTMLElementRefOf } from "@plasmicapp/react-web";
import { supabase } from "../lib/supabaseClient";
import { useAuth } from "../AuthContext";
import { logger, logSupabaseError } from "../lib/logger";

// Your component props start with props for variants and slots you defined
// in Plasmic, but you can add more here, like event handlers that you can
// attach to named nodes in your component.
//
// If you don't want to expose certain variants or slots as a prop, you can use
// Omit to hide them:
//
// interface ScriptureNotesGridProps extends Omit<DefaultScriptureNotesGridProps, "hideProps1"|"hideProp2"> {
//   // etc.
// }
//
// You can also stop extending from DefaultScriptureNotesGridProps altogether and have
// total control over the props for your component.
export interface ScriptureNotesGridProps
  extends DefaultScriptureNotesGridProps {
  book: string;
  chapter: number;
  verse: number;
  text: string;
}

function ScriptureNotesGrid_(
  { book, chapter, verse, text, ...rest }: ScriptureNotesGridProps,
  ref: HTMLElementRefOf<"div">
) {
  const { profile } = useAuth();
  const loginId = profile?.phoneNumber;
  const [noteId, setNoteId] = React.useState<string | null>(null);
  const [content, setContent] = React.useState<string>("");

  // Fetch existing note when context or location changes
  React.useEffect(() => {
    const fetchNote = async () => {
      if (!supabase || !loginId) {
        logger.warn("[ScriptureNotesGrid] Supabase or loginId missing");
        return;
      }

      const { data, error } = await supabase
        .from("Note")
        .select("id,content")
        .eq("loginId", loginId)
        .eq("book", book)
        .eq("chapter", chapter)
        .eq("verse", verse)
        .maybeSingle();

      if (error) {
        logSupabaseError('ScriptureNotesGrid fetchNote', error);
      } else if (data) {
        setNoteId(data.id);
        setContent(data.content ?? "");
      } else {
        setNoteId(null);
        setContent("");
      }
    };

    fetchNote();
  }, [loginId, book, chapter, verse]);

  const saveNote = async () => {
    if (!supabase || !loginId) {
      logger.warn("[ScriptureNotesGrid] Cannot save without Supabase or loginId");
      return;
    }

    const id = noteId ?? crypto.randomUUID();
    const prefix = `Notes for Scripture ${book} ${chapter}:${verse} - ${text}`;

    const { error } = await supabase
      .from("Note")
      .upsert({
        id,
        loginId,
        book,
        chapter,
        verse,
        content: `${prefix}: ${content}`,
        updatedAt: new Date().toISOString(),
      })
      .select("id")
      .single();

    if (error) {
      logSupabaseError('ScriptureNotesGrid saveNote', error);
    } else {
      setNoteId(id);
    }
  };

  return (
    <PlasmicScriptureNotesGrid
      scriptureNotesGrid={{ ref }}
      scriptureText={{
        children: (
          <>
            <div style={{ fontWeight: "bold", marginBottom: "0.25rem" }}>
              Verse {verse}
            </div>
            <div>{text}</div>
          </>
        ),
      }}
      noteText={{
        children: (
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            onBlur={saveNote}
            placeholder={`Notes for verse ${verse}`}
            rows={2}
            style={{ width: "100%" }}
          />
        ),
      }}
      {...rest}
    />
  );
}

const ScriptureNotesGrid = React.forwardRef(ScriptureNotesGrid_);
export default ScriptureNotesGrid;

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kPtL4UpULb2Exm5C4cyhzL
// Component: ti8lvmbBkGxm

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../defaultStyles.css"; // plasmic-import: global/defaultcss
import "../antd_5_hostless/plasmic.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import "../plasmic_rich_components/plasmic.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import "../library_tailwind_3_4_color_tokens/plasmic.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import "../library_tailwind_3_4_number_tokens/plasmic.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import "../../components/plasmic/plasmic_my_project.css"; // plasmic-import: kPtL4UpULb2Exm5C4cyhzL/projectcss
import "./PlasmicLogin.css"; // plasmic-import: ti8lvmbBkGxm/css

createPlasmicElementProxy;

export type PlasmicLogin__VariantMembers = {};
export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: Flex__<"div">;
  login?: Flex__<"div">;
  inputPhone?: Flex__<typeof AntdInput>;
  sendButton?: Flex__<typeof AntdButton>;
  inputVerification?: Flex__<typeof AntdInput>;
  verifyButton?: Flex__<typeof AntdButton>;
};

export interface DefaultLoginProps {
  className?: string;
}

const $$ = {};

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "inputPhone.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "inputVerification.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <div className={"plasmic_page_wrapper"}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "root_reset_kPtL4UpULb2Exm5C4cyhzL",
            "plasmic_default_styles",
            "plasmic_mixins",
            "plasmic_tokens",
            "Login__root__bBtqC"
          )}
        >
          <div
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Login__login__baCQe"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Login__freeBox__jo0F"
              )}
            >
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "Login__freeBox__dkUqo"
                )}
              >
                <div
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__div",
                    "__wab_text",
                    "Login__text___2CSl"
                  )}
                >
                  {"Enter Phone Number:"}
                </div>
              </div>
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "Login__freeBox__crMKf"
                )}
              >
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      "Login__inputPhone__tYl9H"
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["inputPhone", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "inputPhone",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputPhone.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputPhone"}
                      data-plasmic-override={overrides.inputPhone}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "Login__freeBox__wgtIt"
                )}
              >
                <AntdButton
                  data-plasmic-name={"sendButton"}
                  data-plasmic-override={overrides.sendButton}
                  className={classNames(
                    "__wab_instance",
                    "Login__sendButton__gcdZg"
                  )}
                >
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Login__text__sgxkJ"
                    )}
                  >
                    {"Send"}
                  </div>
                </AntdButton>
              </div>
            </div>
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Login__freeBox__nQoLf"
              )}
            >
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "Login__freeBox__sAvfw"
                )}
              >
                <div
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__div",
                    "__wab_text",
                    "Login__text__qptP4"
                  )}
                >
                  {"Enter Verification Code:"}
                </div>
              </div>
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "Login__freeBox___5FXnH"
                )}
              >
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      "Login__inputVerification__sv7OL"
                    ),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["inputVerification", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "inputVerification",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "inputVerification.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"inputVerification"}
                      data-plasmic-override={overrides.inputVerification}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "Login__freeBox__uLa49"
                )}
              >
                <AntdButton
                  data-plasmic-name={"verifyButton"}
                  data-plasmic-override={overrides.verifyButton}
                  className={classNames(
                    "__wab_instance",
                    "Login__verifyButton__t6XH0"
                  )}
                >
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Login__text__xsq0J"
                    )}
                  >
                    {"Verify"}
                  </div>
                </AntdButton>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "login",
    "inputPhone",
    "sendButton",
    "inputVerification",
    "verifyButton"
  ],
  login: [
    "login",
    "inputPhone",
    "sendButton",
    "inputVerification",
    "verifyButton"
  ],
  inputPhone: ["inputPhone"],
  sendButton: ["sendButton"],
  inputVerification: ["inputVerification"],
  verifyButton: ["verifyButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  login: "div";
  inputPhone: typeof AntdInput;
  sendButton: typeof AntdButton;
  inputVerification: typeof AntdInput;
  verifyButton: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin__ArgProps,
          internalVariantPropNames: PlasmicLogin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "kPtL4UpULb2Exm5C4cyhzL"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    login: makeNodeComponent("login"),
    inputPhone: makeNodeComponent("inputPhone"),
    sendButton: makeNodeComponent("sendButton"),
    inputVerification: makeNodeComponent("inputVerification"),
    verifyButton: makeNodeComponent("verifyButton"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */

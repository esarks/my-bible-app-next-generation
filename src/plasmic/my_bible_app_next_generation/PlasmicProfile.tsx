/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kPtL4UpULb2Exm5C4cyhzL
// Component: V2tTGAx8KTsP

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../defaultStyles.css"; // plasmic-import: global/defaultcss
import "../antd_5_hostless/plasmic.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import "../plasmic_rich_components/plasmic.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import "../library_tailwind_3_4_color_tokens/plasmic.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import "../library_tailwind_3_4_number_tokens/plasmic.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import "../../components/plasmic/plasmic_my_project.css"; // plasmic-import: kPtL4UpULb2Exm5C4cyhzL/projectcss
import "./PlasmicProfile.css"; // plasmic-import: V2tTGAx8KTsP/css

createPlasmicElementProxy;

export type PlasmicProfile__VariantMembers = {};
export type PlasmicProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfile__VariantsArgs;
export const PlasmicProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicProfile__ArgsType = {};
type ArgPropType = keyof PlasmicProfile__ArgsType;
export const PlasmicProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicProfile__OverridesType = {
  root?: Flex__<"div">;
  profile?: Flex__<"div">;
  telephoneInput?: Flex__<typeof AntdInput>;
  nameInput?: Flex__<typeof AntdInput>;
  emailInput?: Flex__<typeof AntdInput>;
  emailVerifiedInput?: Flex__<typeof AntdInput>;
  saveButton?: Flex__<typeof AntdButton>;
};

export interface DefaultProfileProps {
  className?: string;
}

const $$ = {};

function PlasmicProfile__RenderFunc(props: {
  variants: PlasmicProfile__VariantsArgs;
  args: PlasmicProfile__ArgsType;
  overrides: PlasmicProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "telephoneInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "emailVerifiedInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_kPtL4UpULb2Exm5C4cyhzL",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens",
        "Profile__root___7Q1S8"
      )}
    >
      <div
        data-plasmic-name={"profile"}
        data-plasmic-override={overrides.profile}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Profile__profile__qZCys"
        )}
      >
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Profile__freeBox__iM38F"
          )}
        >
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox__a9DIl"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "Profile__text__hafCk"
              )}
            >
              {"Telephone Number:"}
            </div>
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox__eVjFp"
            )}
          >
            {(() => {
              const child$Props = {
                className: classNames(
                  "__wab_instance",
                  "Profile__telephoneInput__ja46N"
                ),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["telephoneInput", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);
                },
                value: generateStateValueProp($state, [
                  "telephoneInput",
                  "value"
                ])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "telephoneInput.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"telephoneInput"}
                  data-plasmic-override={overrides.telephoneInput}
                  {...child$Props}
                />
              );
            })()}
          </div>
        </div>
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Profile__freeBox___0UPly"
          )}
        >
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox__wdYc"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "Profile__text__uy4Bi"
              )}
            >
              {"Name:"}
            </div>
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox__ol0Nx"
            )}
          >
            {(() => {
              const child$Props = {
                className: classNames(
                  "__wab_instance",
                  "Profile__nameInput__wdNuo"
                ),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["nameInput", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);
                },
                value: generateStateValueProp($state, ["nameInput", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "nameInput.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"nameInput"}
                  data-plasmic-override={overrides.nameInput}
                  {...child$Props}
                />
              );
            })()}
          </div>
        </div>
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Profile__freeBox___41FOp"
          )}
        >
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox__ycNuQ"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "Profile__text__afOJ"
              )}
            >
              {"Email:"}
            </div>
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox___39Gb3"
            )}
          >
            {(() => {
              const child$Props = {
                className: classNames(
                  "__wab_instance",
                  "Profile__emailInput__mgWwa"
                ),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["emailInput", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);
                },
                value: generateStateValueProp($state, ["emailInput", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "emailInput.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"emailInput"}
                  data-plasmic-override={overrides.emailInput}
                  {...child$Props}
                />
              );
            })()}
          </div>
        </div>
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Profile__freeBox__q4AaH"
          )}
        >
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox__ms0Uy"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "Profile__text__lu9A"
              )}
            >
              {"Email Verified:"}
            </div>
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox__fnlhU"
            )}
          >
            {(() => {
              const child$Props = {
                className: classNames(
                  "__wab_instance",
                  "Profile__emailVerifiedInput__fTbi"
                ),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["emailVerifiedInput", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);
                },
                value: generateStateValueProp($state, [
                  "emailVerifiedInput",
                  "value"
                ])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "emailVerifiedInput.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"emailVerifiedInput"}
                  data-plasmic-override={overrides.emailVerifiedInput}
                  {...child$Props}
                />
              );
            })()}
          </div>
        </div>
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Profile__freeBox__cxOgp"
          )}
        >
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox___9Y6Ba"
            )}
          />

          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Profile__freeBox__gYcoC"
            )}
          >
            <AntdButton
              data-plasmic-name={"saveButton"}
              data-plasmic-override={overrides.saveButton}
              className={classNames(
                "__wab_instance",
                "Profile__saveButton__wAObl"
              )}
            >
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "__wab_text",
                  "Profile__text__wi5B"
                )}
              >
                {"Save"}
              </div>
            </AntdButton>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "profile",
    "telephoneInput",
    "nameInput",
    "emailInput",
    "emailVerifiedInput",
    "saveButton"
  ],
  profile: [
    "profile",
    "telephoneInput",
    "nameInput",
    "emailInput",
    "emailVerifiedInput",
    "saveButton"
  ],
  telephoneInput: ["telephoneInput"],
  nameInput: ["nameInput"],
  emailInput: ["emailInput"],
  emailVerifiedInput: ["emailVerifiedInput"],
  saveButton: ["saveButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  profile: "div";
  telephoneInput: typeof AntdInput;
  nameInput: typeof AntdInput;
  emailInput: typeof AntdInput;
  emailVerifiedInput: typeof AntdInput;
  saveButton: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfile__VariantsArgs;
    args?: PlasmicProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfile__ArgProps,
          internalVariantPropNames: PlasmicProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfile";
  } else {
    func.displayName = `PlasmicProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicProfile = Object.assign(
  // Top-level PlasmicProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profile: makeNodeComponent("profile"),
    telephoneInput: makeNodeComponent("telephoneInput"),
    nameInput: makeNodeComponent("nameInput"),
    emailInput: makeNodeComponent("emailInput"),
    emailVerifiedInput: makeNodeComponent("emailVerifiedInput"),
    saveButton: makeNodeComponent("saveButton"),

    // Metadata about props expected for PlasmicProfile
    internalVariantProps: PlasmicProfile__VariantProps,
    internalArgProps: PlasmicProfile__ArgProps
  }
);

export default PlasmicProfile;
/* prettier-ignore-end */

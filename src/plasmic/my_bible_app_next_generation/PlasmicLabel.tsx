/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kPtL4UpULb2Exm5C4cyhzL
// Component: gUReRUczsHZA

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseLabel } from "@plasmicpkgs/react-aria/skinny/registerLabel";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../defaultStyles.css"; // plasmic-import: global/defaultcss
import "../antd_5_hostless/plasmic.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import "../plasmic_rich_components/plasmic.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import "../library_tailwind_3_4_color_tokens/plasmic.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import "../library_tailwind_3_4_number_tokens/plasmic.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import "../../components/plasmic/plasmic_my_project.css"; // plasmic-import: kPtL4UpULb2Exm5C4cyhzL/projectcss
import "./PlasmicLabel.css"; // plasmic-import: gUReRUczsHZA/css

createPlasmicElementProxy;

export type PlasmicLabel__VariantMembers = {
  size: "sm" | "lg";
  requirementIndicator: "optional" | "required";
};
export type PlasmicLabel__VariantsArgs = {
  size?: SingleChoiceArg<"sm" | "lg">;
  requirementIndicator?: SingleChoiceArg<"optional" | "required">;
};
type VariantPropType = keyof PlasmicLabel__VariantsArgs;
export const PlasmicLabel__VariantProps = new Array<VariantPropType>(
  "size",
  "requirementIndicator"
);

export type PlasmicLabel__ArgsType = { children?: React.ReactNode };
type ArgPropType = keyof PlasmicLabel__ArgsType;
export const PlasmicLabel__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLabel__OverridesType = {
  root?: Flex__<typeof BaseLabel>;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultLabelProps {
  children?: React.ReactNode;
  size?: SingleChoiceArg<"sm" | "lg">;
  requirementIndicator?: SingleChoiceArg<"optional" | "required">;
  className?: string;
}

const $$ = {};

function PlasmicLabel__RenderFunc(props: {
  variants: PlasmicLabel__VariantsArgs;
  args: PlasmicLabel__ArgsType;
  overrides: PlasmicLabel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "requirementIndicator",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.requirementIndicator
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <BaseLabel
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        "root_reset_kPtL4UpULb2Exm5C4cyhzL",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens",
        "Label__root__amQo4",
        {
          Label__rootrequirementIndicator_optional__amQo4752: hasVariant(
            $state,
            "requirementIndicator",
            "optional"
          ),
          Label__rootrequirementIndicator_required__amQo4JVxiD: hasVariant(
            $state,
            "requirementIndicator",
            "required"
          ),
          Label__rootsize_lg__amQo4HyGxB: hasVariant($state, "size", "lg"),
          Label__rootsize_sm__amQo4Zz0PW: hasVariant($state, "size", "sm")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Label__freeBox__kv0Am",
          {
            Label__freeBoxrequirementIndicator_optional__kv0Am752: hasVariant(
              $state,
              "requirementIndicator",
              "optional"
            ),
            Label__freeBoxsize_lg__kv0AmhyGxB: hasVariant($state, "size", "lg"),
            Label__freeBoxsize_sm__kv0AmZz0PW: hasVariant($state, "size", "sm")
          }
        )}
      >
        {renderPlasmicSlot({
          defaultContents: "Label",
          value: args.children,
          className: classNames("Label__slotTargetChildren__rg5Fq", {
            Label__slotTargetChildrenrequirementIndicator_optional__rg5Fq752:
              hasVariant($state, "requirementIndicator", "optional"),
            Label__slotTargetChildrenrequirementIndicator_required__rg5FqjVxiD:
              hasVariant($state, "requirementIndicator", "required"),
            Label__slotTargetChildrensize_lg__rg5FQhyGxB: hasVariant(
              $state,
              "size",
              "lg"
            ),
            Label__slotTargetChildrensize_sm__rg5Fqzz0PW: hasVariant(
              $state,
              "size",
              "sm"
            )
          })
        })}
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "__wab_text",
            "Label__text__qErWt",
            {
              Label__textrequirementIndicator_optional__qErWt752: hasVariant(
                $state,
                "requirementIndicator",
                "optional"
              ),
              Label__textrequirementIndicator_required__qErWtJVxiD: hasVariant(
                $state,
                "requirementIndicator",
                "required"
              )
            }
          )}
        >
          {hasVariant($state, "requirementIndicator", "required")
            ? "*"
            : "(optional)"}
        </div>
      </Stack__>
    </BaseLabel>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BaseLabel;
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLabel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLabel__VariantsArgs;
    args?: PlasmicLabel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLabel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLabel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLabel__ArgProps,
          internalVariantPropNames: PlasmicLabel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLabel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLabel";
  } else {
    func.displayName = `PlasmicLabel.${nodeName}`;
  }
  return func;
}

export const PlasmicLabel = Object.assign(
  // Top-level PlasmicLabel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLabel
    internalVariantProps: PlasmicLabel__VariantProps,
    internalArgProps: PlasmicLabel__ArgProps
  }
);

export default PlasmicLabel;
/* prettier-ignore-end */

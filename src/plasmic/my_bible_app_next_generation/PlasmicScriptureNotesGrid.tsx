/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: chwrzvw5hacDdCDtmYaSSb
// Component: CmsshMtLcT2f

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../defaultStyles.css"; // plasmic-import: global/defaultcss
import "../antd_5_hostless/plasmic.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import "../plasmic_rich_components/plasmic.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import "../../components/plasmic/plasmic_my_project.css"; // plasmic-import: chwrzvw5hacDdCDtmYaSSb/projectcss
import "./PlasmicScriptureNotesGrid.css"; // plasmic-import: CmsshMtLcT2f/css

createPlasmicElementProxy;

export type PlasmicScriptureNotesGrid__VariantMembers = {};
export type PlasmicScriptureNotesGrid__VariantsArgs = {};
type VariantPropType = keyof PlasmicScriptureNotesGrid__VariantsArgs;
export const PlasmicScriptureNotesGrid__VariantProps =
  new Array<VariantPropType>();

export type PlasmicScriptureNotesGrid__ArgsType = {};
type ArgPropType = keyof PlasmicScriptureNotesGrid__ArgsType;
export const PlasmicScriptureNotesGrid__ArgProps = new Array<ArgPropType>();

export type PlasmicScriptureNotesGrid__OverridesType = {
  scriptureNotesGrid?: Flex__<"div">;
  scriptureText?: Flex__<"div">;
  noteText?: Flex__<"div">;
  addNotesButton?: Flex__<typeof AntdButton>;
  text?: Flex__<"div">;
};

export interface DefaultScriptureNotesGridProps {
  className?: string;
}

const $$ = {};

function PlasmicScriptureNotesGrid__RenderFunc(props: {
  variants: PlasmicScriptureNotesGrid__VariantsArgs;
  args: PlasmicScriptureNotesGrid__ArgsType;
  overrides: PlasmicScriptureNotesGrid__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"scriptureNotesGrid"}
      data-plasmic-override={overrides.scriptureNotesGrid}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_chwrzvw5hacDdCDtmYaSSb",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens",
        "ScriptureNotesGrid__scriptureNotesGrid__biBna"
      )}
    >
      <div
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "ScriptureNotesGrid__freeBox__oykn1"
        )}
      >
        <div
          data-plasmic-name={"scriptureText"}
          data-plasmic-override={overrides.scriptureText}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "__wab_text",
            "ScriptureNotesGrid__scriptureText__u5Udk"
          )}
        >
          {"Enter some text"}
        </div>
      </div>
      <div
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "ScriptureNotesGrid__freeBox__uxY5M"
        )}
      >
        <div
          data-plasmic-name={"noteText"}
          data-plasmic-override={overrides.noteText}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "__wab_text",
            "ScriptureNotesGrid__noteText__x9KHx"
          )}
        >
          {"Enter some text"}
        </div>
        <AntdButton
          data-plasmic-name={"addNotesButton"}
          data-plasmic-override={overrides.addNotesButton}
          className={classNames(
            "__wab_instance",
            "ScriptureNotesGrid__addNotesButton__whxAx"
          )}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "__wab_text",
              "ScriptureNotesGrid__text__aZdPy"
            )}
          >
            {"Button"}
          </div>
        </AntdButton>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  scriptureNotesGrid: [
    "scriptureNotesGrid",
    "scriptureText",
    "noteText",
    "addNotesButton",
    "text"
  ],
  scriptureText: ["scriptureText"],
  noteText: ["noteText"],
  addNotesButton: ["addNotesButton", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  scriptureNotesGrid: "div";
  scriptureText: "div";
  noteText: "div";
  addNotesButton: typeof AntdButton;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScriptureNotesGrid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicScriptureNotesGrid__VariantsArgs;
    args?: PlasmicScriptureNotesGrid__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicScriptureNotesGrid__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicScriptureNotesGrid__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScriptureNotesGrid__ArgProps,
          internalVariantPropNames: PlasmicScriptureNotesGrid__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScriptureNotesGrid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "scriptureNotesGrid") {
    func.displayName = "PlasmicScriptureNotesGrid";
  } else {
    func.displayName = `PlasmicScriptureNotesGrid.${nodeName}`;
  }
  return func;
}

export const PlasmicScriptureNotesGrid = Object.assign(
  // Top-level PlasmicScriptureNotesGrid renders the root element
  makeNodeComponent("scriptureNotesGrid"),
  {
    // Helper components rendering sub-elements
    scriptureText: makeNodeComponent("scriptureText"),
    noteText: makeNodeComponent("noteText"),
    addNotesButton: makeNodeComponent("addNotesButton"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicScriptureNotesGrid
    internalVariantProps: PlasmicScriptureNotesGrid__VariantProps,
    internalArgProps: PlasmicScriptureNotesGrid__ArgProps
  }
);

export default PlasmicScriptureNotesGrid;
/* prettier-ignore-end */

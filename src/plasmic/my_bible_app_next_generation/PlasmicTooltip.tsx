/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kPtL4UpULb2Exm5C4cyhzL
// Component: CPyQYMD6rfbs

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseTooltip } from "@plasmicpkgs/react-aria/skinny/registerTooltip";
import OverlayArrow from "../../components/OverlayArrow"; // plasmic-import: Y63mtqn2B6Aq/component

import "@plasmicapp/react-web/lib/plasmic.css";
import "../defaultStyles.css"; // plasmic-import: global/defaultcss
import "../antd_5_hostless/plasmic.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import "../plasmic_rich_components/plasmic.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import "../library_tailwind_3_4_color_tokens/plasmic.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import "../library_tailwind_3_4_number_tokens/plasmic.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import "../../components/plasmic/plasmic_my_project.css"; // plasmic-import: kPtL4UpULb2Exm5C4cyhzL/projectcss
import "./PlasmicTooltip.css"; // plasmic-import: CPyQYMD6rfbs/css

createPlasmicElementProxy;

export type PlasmicTooltip__VariantMembers = {};
export type PlasmicTooltip__VariantsArgs = {};
type VariantPropType = keyof PlasmicTooltip__VariantsArgs;
export const PlasmicTooltip__VariantProps = new Array<VariantPropType>();

export type PlasmicTooltip__ArgsType = {
  isOpen?: boolean;
  onOpenChange?: (val: boolean) => void;
  openDelay?: number;
  closeDelay?: number;
  placement?: "top" | "bottom" | "left" | "right";
  isDisabled?: boolean;
  showArrow?: boolean;
  offset?: number;
  triggerAction?: "focus" | "focus and hover";
  trigger?: React.ReactNode;
  content?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTooltip__ArgsType;
export const PlasmicTooltip__ArgProps = new Array<ArgPropType>(
  "isOpen",
  "onOpenChange",
  "openDelay",
  "closeDelay",
  "placement",
  "isDisabled",
  "showArrow",
  "offset",
  "triggerAction",
  "trigger",
  "content"
);

export type PlasmicTooltip__OverridesType = {
  ariaTooltip?: Flex__<typeof BaseTooltip>;
  overlayArrow?: Flex__<typeof OverlayArrow>;
  freeBox?: Flex__<"div">;
};

export interface DefaultTooltipProps {
  isOpen?: boolean;
  onOpenChange?: (val: boolean) => void;
  openDelay?: number;
  closeDelay?: number;
  placement?: "top" | "bottom" | "left" | "right";
  isDisabled?: boolean;
  showArrow?: boolean;
  offset?: number;
  triggerAction?: "focus" | "focus and hover";
  trigger?: React.ReactNode;
  content?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicTooltip__RenderFunc(props: {
  variants: PlasmicTooltip__VariantsArgs;
  args: PlasmicTooltip__ArgsType;
  overrides: PlasmicTooltip__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          openDelay: 0,
          closeDelay: 0,
          placement: "top",
          showArrow: true,
          offset: 10
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaTooltip.isOpen",
        type: "writable",
        variableType: "boolean",

        valueProp: "isOpen",
        onChangeProp: "onOpenChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <BaseTooltip
      data-plasmic-name={"ariaTooltip"}
      data-plasmic-override={overrides.ariaTooltip}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        "root_reset_kPtL4UpULb2Exm5C4cyhzL",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens",
        "Tooltip__ariaTooltip__msxpa"
      )}
      closeDelay={args.closeDelay}
      delay={args.openDelay}
      isDisabled={args.isDisabled}
      isOpen={generateStateValueProp($state, ["ariaTooltip", "isOpen"])}
      offset={args.offset}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["ariaTooltip", "isOpen"]).apply(
          null,
          eventArgs
        );
      }}
      placement={args.placement}
      resetClassName={classNames(
        "root_reset_kPtL4UpULb2Exm5C4cyhzL",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens"
      )}
      tooltipContent={
        <React.Fragment>
          {(() => {
            try {
              return $props.showArrow;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <OverlayArrow
              data-plasmic-name={"overlayArrow"}
              data-plasmic-override={overrides.overlayArrow}
              className={classNames(
                "__wab_instance",
                "Tooltip__overlayArrow___5L6B"
              )}
              dark={true}
            />
          ) : null}
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Tooltip__freeBox__kZf5A"
            )}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Tooltip__text__xzt1B"
                    )}
                  >
                    {"Hello from Tooltip! "}
                  </div>
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Tooltip__text__rjqx"
                    )}
                  >
                    {"Lorem ipsum dolor sit amet"}
                  </div>
                </React.Fragment>
              ),
              value: args.content,
              className: classNames("Tooltip__slotTargetContent__hcffX")
            })}
          </Stack__>
        </React.Fragment>
      }
      trigger={args.triggerAction}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "__wab_text",
              "Tooltip__text__ils9P"
            )}
          >
            {"Hover me!"}
          </div>
        ),
        value: args.trigger,
        className: classNames("Tooltip__slotTargetTrigger__naDxz")
      })}
    </BaseTooltip>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaTooltip: ["ariaTooltip", "overlayArrow", "freeBox"],
  overlayArrow: ["overlayArrow"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaTooltip: typeof BaseTooltip;
  overlayArrow: typeof OverlayArrow;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTooltip__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTooltip__VariantsArgs;
    args?: PlasmicTooltip__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTooltip__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTooltip__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTooltip__ArgProps,
          internalVariantPropNames: PlasmicTooltip__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTooltip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaTooltip") {
    func.displayName = "PlasmicTooltip";
  } else {
    func.displayName = `PlasmicTooltip.${nodeName}`;
  }
  return func;
}

export const PlasmicTooltip = Object.assign(
  // Top-level PlasmicTooltip renders the root element
  makeNodeComponent("ariaTooltip"),
  {
    // Helper components rendering sub-elements
    overlayArrow: makeNodeComponent("overlayArrow"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicTooltip
    internalVariantProps: PlasmicTooltip__VariantProps,
    internalArgProps: PlasmicTooltip__ArgProps
  }
);

export default PlasmicTooltip;
/* prettier-ignore-end */

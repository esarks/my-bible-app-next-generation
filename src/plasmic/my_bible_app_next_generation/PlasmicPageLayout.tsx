/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: chwrzvw5hacDdCDtmYaSSb
// Component: TZVmFGETAb0O

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../defaultStyles.css"; // plasmic-import: global/defaultcss
import "../antd_5_hostless/plasmic.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import "../plasmic_rich_components/plasmic.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import "../../components/plasmic/plasmic_my_project.css"; // plasmic-import: chwrzvw5hacDdCDtmYaSSb/projectcss
import "./PlasmicPageLayout.css"; // plasmic-import: TZVmFGETAb0O/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: aiVfj0sSwEfU/icon

createPlasmicElementProxy;

export type PlasmicPageLayout__VariantMembers = {};
export type PlasmicPageLayout__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageLayout__VariantsArgs;
export const PlasmicPageLayout__VariantProps = new Array<VariantPropType>();

export type PlasmicPageLayout__ArgsType = {};
type ArgPropType = keyof PlasmicPageLayout__ArgsType;
export const PlasmicPageLayout__ArgProps = new Array<ArgPropType>();

export type PlasmicPageLayout__OverridesType = {
  root?: Flex__<typeof RichLayout>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  svg?: Flex__<"svg">;
};

export interface DefaultPageLayoutProps {
  className?: string;
}

const $$ = {};

function PlasmicPageLayout__RenderFunc(props: {
  variants: PlasmicPageLayout__VariantsArgs;
  args: PlasmicPageLayout__ArgsType;
  overrides: PlasmicPageLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        "root_reset_chwrzvw5hacDdCDtmYaSSb",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens",
        "PageLayout__root__gqsdg"
      )}
      logoElement={
        <Icon2Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__svg",
            "PageLayout__svg__zBgr1"
          )}
          role={"img"}
        />
      }
      navMenuItems={(() => {
        const __composite = [
          { path: null, name: null },
          { path: null, name: null },
          { path: null, name: null },
          { path: null, name: null }
        ];
        __composite["0"]["path"] = `/`;
        __composite["0"]["name"] = "Home";
        __composite["1"]["path"] = "login";
        __composite["1"]["name"] = "Login";
        __composite["2"]["path"] = "profile";
        __composite["2"]["name"] = "Profile";
        __composite["3"]["path"] = "scriptures";
        __composite["3"]["name"] = "Scriptures";
        return __composite;
      })()}
      simpleNavTheme={(() => {
        const __composite = { scheme: null };
        __composite["scheme"] = "primary";
        return __composite;
      })()}
      title={"App title"}
    >
      <div
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "PageLayout__freeBox__g5NU"
        )}
      >
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "PageLayout__freeBox___29P5"
          )}
        >
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox__vFUwt"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "PageLayout__text___3HvM"
              )}
            >
              {"Enter Phone"}
            </div>
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox___2E04Q"
            )}
          >
            {(() => {
              const child$Props = {
                className: classNames(
                  "__wab_instance",
                  "PageLayout__input__ldW8B"
                ),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);
                },
                value: generateStateValueProp($state, ["input", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"input"}
                  data-plasmic-override={overrides.input}
                  {...child$Props}
                />
              );
            })()}
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox__tNaaw"
            )}
          >
            <AntdButton
              className={classNames(
                "__wab_instance",
                "PageLayout__button__q5R"
              )}
            >
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "__wab_text",
                  "PageLayout__text__otyuu"
                )}
              >
                {"Send"}
              </div>
            </AntdButton>
          </div>
        </div>
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "PageLayout__freeBox__rdd1O"
          )}
        >
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox__py4JM"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "PageLayout__text__j9X0V"
              )}
            >
              {"Enter Verification Code\n"}
            </div>
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox__qDd7A"
            )}
          >
            {(() => {
              const child$Props = {
                className: classNames(
                  "__wab_instance",
                  "PageLayout__input2___5Yj9Q"
                ),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input2", "value"],
                    AntdInput_Helpers
                  ).apply(null, eventArgs);
                },
                value: generateStateValueProp($state, ["input2", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "input2.value"
                  }
                ],
                [],
                AntdInput_Helpers ?? {},
                child$Props
              );

              return (
                <AntdInput
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  {...child$Props}
                />
              );
            })()}
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox__rl1Kp"
            )}
          >
            <AntdButton
              className={classNames(
                "__wab_instance",
                "PageLayout__button___54Kpm"
              )}
            >
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "__wab_text",
                  "PageLayout__text__mlVw2"
                )}
              >
                {"Validate"}
              </div>
            </AntdButton>
          </div>
        </div>
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "PageLayout__freeBox__avRd8"
          )}
        >
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox__fzleq"
            )}
          />

          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox__hxSso"
            )}
          />

          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "PageLayout__freeBox__fBdNc"
            )}
          />
        </div>
      </div>
    </RichLayout>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "input", "input2", "svg"],
  input: ["input"],
  input2: ["input2"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof RichLayout;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageLayout__VariantsArgs;
    args?: PlasmicPageLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPageLayout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageLayout__ArgProps,
          internalVariantPropNames: PlasmicPageLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageLayout";
  } else {
    func.displayName = `PlasmicPageLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicPageLayout = Object.assign(
  // Top-level PlasmicPageLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicPageLayout
    internalVariantProps: PlasmicPageLayout__VariantProps,
    internalArgProps: PlasmicPageLayout__ArgProps
  }
);

export default PlasmicPageLayout;
/* prettier-ignore-end */

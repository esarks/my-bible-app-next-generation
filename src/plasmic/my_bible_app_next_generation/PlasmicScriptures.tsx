/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: chwrzvw5hacDdCDtmYaSSb
// Component: zxnu1SLrha_c

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import PageLayout from "../../components/PageLayout"; // plasmic-import: TZVmFGETAb0O/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../defaultStyles.css"; // plasmic-import: global/defaultcss
import "../antd_5_hostless/plasmic.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import "../plasmic_rich_components/plasmic.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import "../../components/plasmic/plasmic_my_project.css"; // plasmic-import: chwrzvw5hacDdCDtmYaSSb/projectcss
import "./PlasmicScriptures.css"; // plasmic-import: zxnu1SLrha_c/css

createPlasmicElementProxy;

export type PlasmicScriptures__VariantMembers = {};
export type PlasmicScriptures__VariantsArgs = {};
type VariantPropType = keyof PlasmicScriptures__VariantsArgs;
export const PlasmicScriptures__VariantProps = new Array<VariantPropType>();

export type PlasmicScriptures__ArgsType = {
  scriptureNotesGrid?: React.ReactNode;
};
type ArgPropType = keyof PlasmicScriptures__ArgsType;
export const PlasmicScriptures__ArgProps = new Array<ArgPropType>(
  "scriptureNotesGrid"
);

export type PlasmicScriptures__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  versionSelect?: Flex__<typeof AntdSelect>;
  bookSelect?: Flex__<typeof AntdSelect>;
  chapterSelect?: Flex__<typeof AntdSelect>;
  bookNotes?: Flex__<"div">;
  bookNotesButton?: Flex__<typeof AntdButton>;
  chapterNotes?: Flex__<"div">;
  chapterNotesButton?: Flex__<typeof AntdButton>;
};

export interface DefaultScripturesProps {
  scriptureNotesGrid?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicScriptures__RenderFunc(props: {
  variants: PlasmicScriptures__VariantsArgs;
  args: PlasmicScriptures__ArgsType;
  overrides: PlasmicScriptures__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "versionSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bookSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "chapterSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <div className={"plasmic_page_wrapper"}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "root_reset_chwrzvw5hacDdCDtmYaSSb",
            "plasmic_default_styles",
            "plasmic_mixins",
            "plasmic_tokens",
            "Scriptures__root__qLpk"
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          />

          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Scriptures__freeBox___8FacG"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Scriptures__freeBox__oLxC2"
              )}
            >
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "__wab_text",
                  "Scriptures__text___2YlfF"
                )}
              >
                {"Version:"}
              </div>
              <AntdSelect
                data-plasmic-name={"versionSelect"}
                data-plasmic-override={overrides.versionSelect}
                className={classNames(
                  "__wab_instance",
                  "Scriptures__versionSelect___3Qlat"
                )}
                defaultStylesClassName={classNames(
                  "root_reset_chwrzvw5hacDdCDtmYaSSb",
                  "plasmic_default_styles",
                  "plasmic_mixins",
                  "plasmic_tokens"
                )}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "versionSelect",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                options={[
                  { value: "option1", label: "Option 1", type: "option" },
                  { value: "option2", label: "Option 2", type: "option" }
                ]}
                placeholder={"Select..."}
                popupScopeClassName={"Scriptures__versionSelect___3Qlat__popup"}
                value={generateStateValueProp($state, [
                  "versionSelect",
                  "value"
                ])}
              />
            </div>
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Scriptures__freeBox__kjHjd"
              )}
            >
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "__wab_text",
                  "Scriptures__text__ePKfg"
                )}
              >
                {"Book:"}
              </div>
              <AntdSelect
                data-plasmic-name={"bookSelect"}
                data-plasmic-override={overrides.bookSelect}
                className={classNames(
                  "__wab_instance",
                  "Scriptures__bookSelect__tir3Y"
                )}
                defaultStylesClassName={classNames(
                  "root_reset_chwrzvw5hacDdCDtmYaSSb",
                  "plasmic_default_styles",
                  "plasmic_mixins",
                  "plasmic_tokens"
                )}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "bookSelect",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                options={[
                  { value: "option1", label: "Option 1", type: "option" },
                  { value: "option2", label: "Option 2", type: "option" }
                ]}
                placeholder={"Select..."}
                popupScopeClassName={"Scriptures__bookSelect__tir3Y__popup"}
                suffixIcon={null}
                value={generateStateValueProp($state, ["bookSelect", "value"])}
              />
            </div>
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Scriptures__freeBox__iCjGb"
              )}
            >
              <div
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "__wab_text",
                  "Scriptures__text__y3Bf"
                )}
              >
                {"Chapter:"}
              </div>
              <AntdSelect
                data-plasmic-name={"chapterSelect"}
                data-plasmic-override={overrides.chapterSelect}
                className={classNames(
                  "__wab_instance",
                  "Scriptures__chapterSelect__awZk"
                )}
                defaultStylesClassName={classNames(
                  "root_reset_chwrzvw5hacDdCDtmYaSSb",
                  "plasmic_default_styles",
                  "plasmic_mixins",
                  "plasmic_tokens"
                )}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "chapterSelect",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                options={[
                  { value: "option1", label: "Option 1", type: "option" },
                  { value: "option2", label: "Option 2", type: "option" }
                ]}
                placeholder={"Select..."}
                popupScopeClassName={"Scriptures__chapterSelect__awZk__popup"}
                value={generateStateValueProp($state, [
                  "chapterSelect",
                  "value"
                ])}
              />
            </div>
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Scriptures__freeBox__mG0SS"
            )}
          >
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Scriptures__freeBox__u7Mg7"
              )}
            >
              <div
                data-plasmic-name={"bookNotes"}
                data-plasmic-override={overrides.bookNotes}
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "__wab_text",
                  "Scriptures__bookNotes__aNkig"
                )}
              >
                {"Enter some text"}
              </div>
              <AntdButton
                data-plasmic-name={"bookNotesButton"}
                data-plasmic-override={overrides.bookNotesButton}
                className={classNames(
                  "__wab_instance",
                  "Scriptures__bookNotesButton__lUzeV"
                )}
              >
                <div
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__div",
                    "__wab_text",
                    "Scriptures__text__wC0Zf"
                  )}
                >
                  {"Button"}
                </div>
              </AntdButton>
            </div>
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Scriptures__freeBox__mIggl"
              )}
            >
              <div
                data-plasmic-name={"chapterNotes"}
                data-plasmic-override={overrides.chapterNotes}
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "__wab_text",
                  "Scriptures__chapterNotes__btbug"
                )}
              >
                {"Enter some text"}
              </div>
              <AntdButton
                data-plasmic-name={"chapterNotesButton"}
                data-plasmic-override={overrides.chapterNotesButton}
                className={classNames(
                  "__wab_instance",
                  "Scriptures__chapterNotesButton__ch5Rk"
                )}
              >
                <div
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__div",
                    "__wab_text",
                    "Scriptures__text__lqzKb"
                  )}
                >
                  {"Button"}
                </div>
              </AntdButton>
            </div>
          </div>
          <div
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Scriptures__freeBox__sTy0O"
            )}
          >
            {renderPlasmicSlot({
              defaultContents: null,
              value: args.scriptureNotesGrid
            })}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "versionSelect",
    "bookSelect",
    "chapterSelect",
    "bookNotes",
    "bookNotesButton",
    "chapterNotes",
    "chapterNotesButton"
  ],
  pageLayout: ["pageLayout"],
  versionSelect: ["versionSelect"],
  bookSelect: ["bookSelect"],
  chapterSelect: ["chapterSelect"],
  bookNotes: ["bookNotes"],
  bookNotesButton: ["bookNotesButton"],
  chapterNotes: ["chapterNotes"],
  chapterNotesButton: ["chapterNotesButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  versionSelect: typeof AntdSelect;
  bookSelect: typeof AntdSelect;
  chapterSelect: typeof AntdSelect;
  bookNotes: "div";
  bookNotesButton: typeof AntdButton;
  chapterNotes: "div";
  chapterNotesButton: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicScriptures__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicScriptures__VariantsArgs;
    args?: PlasmicScriptures__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicScriptures__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicScriptures__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScriptures__ArgProps,
          internalVariantPropNames: PlasmicScriptures__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScriptures__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScriptures";
  } else {
    func.displayName = `PlasmicScriptures.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "chwrzvw5hacDdCDtmYaSSb"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicScriptures = Object.assign(
  // Top-level PlasmicScriptures renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    versionSelect: makeNodeComponent("versionSelect"),
    bookSelect: makeNodeComponent("bookSelect"),
    chapterSelect: makeNodeComponent("chapterSelect"),
    bookNotes: makeNodeComponent("bookNotes"),
    bookNotesButton: makeNodeComponent("bookNotesButton"),
    chapterNotes: makeNodeComponent("chapterNotes"),
    chapterNotesButton: makeNodeComponent("chapterNotesButton"),

    // Metadata about props expected for PlasmicScriptures
    internalVariantProps: PlasmicScriptures__VariantProps,
    internalArgProps: PlasmicScriptures__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicScriptures;
/* prettier-ignore-end */
